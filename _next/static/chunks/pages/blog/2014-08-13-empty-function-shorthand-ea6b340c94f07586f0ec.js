_N_E=(window.webpackJsonp_N_E=window.webpackJsonp_N_E||[]).push([[16],{"0o1v":function(e,t,n){"use strict";n.r(t),n.d(t,"meta",(function(){return u})),n.d(t,"default",(function(){return b}));var o=n("rePB"),a=n("Ff2n"),i=(n("q1tI"),n("7ljp")),r=n("hOk3");function c(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?c(Object(n),!0).forEach((function(t){Object(o.a)(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):c(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}var u={title:"Empty Function Shorthand",description:"JavaScript is an interesting language and so far my favorite. Maybe  it's just me but I find stuff some people complain about javascript such  as _automatic semicolon insertion, the way javascript scoping works and function/variable hoisting_ to be some of its best features.",intro:Object(i.a)("section",null,Object(i.a)("p",null,"JavaScript is an interesting language and so far my favorite. Maybe  it's just me but I find stuff some people complain about javascript such  as _automatic semicolon insertion, the way javascript scoping works and function/variable hoisting_ to be some of its best features.")),date:"2014-08-13",tags:["js"]},p={meta:u},l=Object(r.a)({meta:u});function b(e){var t=e.components,n=Object(a.a)(e,["components"]);return Object(i.a)(l,s(s(s({},p),n),{},{components:t,mdxType:"MDXLayout"}),Object(i.a)("p",null,"JavaScript is an interesting language and so far my favorite. Maybe  it's just me but I find stuff some people complain about javascript such  as ",Object(i.a)("em",{parentName:"p"},"automatic semicolon insertion, the way javascript scoping works and function/variable hoisting")," to be some of its best features."),Object(i.a)("p",null,"Sometimes javascript functions may require ",Object(i.a)("inlineCode",{parentName:"p"},"Function")," arguments or callbacks when you don't want to. This can happen often  when you're writing mock components for tests. I used to do this by"),Object(i.a)("pre",null,Object(i.a)("code",s({parentName:"pre"},{className:"language-js"}),"var do_nothing = function(){};\nfoo('bar', do_nothing);\n")),Object(i.a)("p",null,"You can get get the same result by using the ",Object(i.a)("inlineCode",{parentName:"p"},"Function")," constructor and make the code a tiny bit cleaner. This is not a random  hack either. If you check what happens, it also makes sense. The demo  code would look like this when using the constructor."),Object(i.a)("pre",null,Object(i.a)("code",s({parentName:"pre"},{className:"language-js"}),"foo('bar', Function());\n")),Object(i.a)("p",null,"What happens is, ",Object(i.a)("inlineCode",{parentName:"p"},"Function()")," returns a ",Object(i.a)("inlineCode",{parentName:"p"},"Function")," object with an empty body so it does nothing interesting. If you're  still not sure, copy the following code to your browser console or node  REPL."),Object(i.a)("pre",null,Object(i.a)("code",s({parentName:"pre"},{className:"language-js"}),"Function().toString();\n")),Object(i.a)("hr",null),Object(i.a)("p",null,Object(i.a)("strong",{parentName:"p"},"Update:")," found out that ",Object(i.a)("inlineCode",{parentName:"p"},"Function.prototype")," is an empty function and a much better choice because you're not creating new functions like the ",Object(i.a)("inlineCode",{parentName:"p"},"Function()")," constructor does."))}b.isMDXComponent=!0},Pa74:function(e,t,n){(window.__NEXT_P=window.__NEXT_P||[]).push(["/blog/2014-08-13-empty-function-shorthand",function(){return n("0o1v")}])}},[["Pa74",0,1,2]]]);