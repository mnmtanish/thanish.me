_N_E=(window.webpackJsonp_N_E=window.webpackJsonp_N_E||[]).push([[18],{KGNt:function(e,t,n){"use strict";n.r(t),n.d(t,"meta",(function(){return c})),n.d(t,"default",(function(){return u}));var o=n("rePB"),r=n("Ff2n"),a=(n("q1tI"),n("7ljp")),s=n("hOk3");function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){Object(o.a)(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}var c={title:"Errors vs. Bugs",description:"One of the most important things I learned during past few months at  MeteorHacks is the difference between errors and bugs and how they  should be handled. I also found this [awesome article](https://www.joyent.com/developers/node/design/errors) on Joyent website which talks about error handling in node.",intro:Object(a.a)("section",null,Object(a.a)("p",null,"One of the most important things I learned during past few months at  MeteorHacks is the difference between errors and bugs and how they  should be handled. I also found this [awesome article](https://www.joyent.com/developers/node/design/errors) on Joyent website which talks about error handling in node.")),date:"2014-10-11",tags:["js","errors"]},h={meta:c},d=Object(s.a)({meta:c});function u(e){var t=e.components,n=Object(r.a)(e,["components"]);return Object(a.a)(d,l(l(l({},h),n),{},{components:t,mdxType:"MDXLayout"}),Object(a.a)("p",null,"One of the most important things I learned during past few months at  MeteorHacks is the difference between errors and bugs and how they  should be handled. I also found this ",Object(a.a)("a",l({parentName:"p"},{href:"https://www.joyent.com/developers/node/design/errors"}),"awesome article")," on Joyent website which talks about error handling in node."),Object(a.a)("p",null,"Errors can stop your program from working but the program can't fix  it (s.a. losing network connection). The program should be prepared to  handle these events or you're going to say \"It works on my computer\" a  lot. The program must at the least let the user know that an error has  occurred and how to fix it if they can. Also in most cases it'll be  great if we can keep at least some parts of the application running."),Object(a.a)("p",null,"Bugs are mistakes made by the programmer (or Loki who likes messing  our code when we're not watching). The program should never expect or  try to handle bugs automatically. When developing, it's usually best to  let the program crash so you can identify and fix the bug as early as  possible. Here are some examples for a few different kinds of bugs."),Object(a.a)("pre",null,Object(a.a)("code",l({parentName:"pre"},{className:"language-js"}),"// syntax\nconsole,log('hello world')\n\n// typos\nkonsole.log('hello world')\n\n// logical\nvar square = number * 2;\n")),Object(a.a)("p",null,"This might sound pretty dumb but I found this really important. I  learned this the hard way and I'm always going to keep this in mind when  I code."))}u.isMDXComponent=!0},n2So:function(e,t,n){(window.__NEXT_P=window.__NEXT_P||[]).push(["/blog/2014-10-11-errors-vs-bugs",function(){return n("KGNt")}])}},[["n2So",0,1,2]]]);