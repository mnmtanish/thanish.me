_N_E=(window.webpackJsonp_N_E=window.webpackJsonp_N_E||[]).push([[25],{"3IMX":function(e,r,t){"use strict";t.r(r),t.d(r,"meta",(function(){return l})),t.d(r,"default",(function(){return u}));var s=t("rePB"),a=t("Ff2n"),n=(t("q1tI"),t("7ljp")),o=t("hOk3");function i(e,r){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);r&&(s=s.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),t.push.apply(t,s)}return t}function c(e){for(var r=1;r<arguments.length;r++){var t=null!=arguments[r]?arguments[r]:{};r%2?i(Object(t),!0).forEach((function(r){Object(s.a)(e,r,t[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(t,r))}))}return e}var l={title:"Masking GraphQL Errors",description:"The way **graphql-js** and **express-graphql** handle errors is has some issues. Consider this example server which has a bug in a resolve function.",intro:Object(n.a)("section",null,Object(n.a)("p",null,"The way **graphql-js** and **express-graphql** handle errors is has some issues. Consider this example server which has a bug in a resolve function.")),date:"2016-01-03",tags:["graphql","js"]},h={meta:l},p=Object(o.a)({meta:l});function u(e){var r=e.components,t=Object(a.a)(e,["components"]);return Object(n.a)(p,c(c(c({},h),t),{},{components:r,mdxType:"MDXLayout"}),Object(n.a)("p",null,"The way ",Object(n.a)("strong",{parentName:"p"},"graphql-js")," and ",Object(n.a)("strong",{parentName:"p"},"express-graphql")," handle errors is has some issues. Consider this example server which has a bug in a resolve function."),Object(n.a)("p",null,"When the query \u201c{ users }\u201d is executed, the server will respond with the error message \u201cUser.find is not a function\u201d. There are several problems with this behavior:"),Object(n.a)("h3",null,"[ 1 ]"," Error stacktraces are\xa0hidden"),Object(n.a)("p",null,"When developing the application or when running it in production error stack traces are extremely useful to pinpoint issues. But when errors occur inside resolve functions, they are not logged on the server."),Object(n.a)("h3",null,"[ 2 ]"," Server source code get\xa0exposed"),Object(n.a)("p",null,"Error messages may have parts of the source code in it. When running the above example server, with the error message alone it is visible that the server program tries to call a ",Object(n.a)("strong",{parentName:"p"},"find")," method on a variable called ",Object(n.a)("strong",{parentName:"p"},"User"),". With this knowledge, it\u2019s possible to make good assumptions about the server."),Object(n.a)("p",null,'{{< figure src="/imported/1-9WYx0Ntr0C87KhY-gMgEFg.png" >}}'),Object(n.a)("h3",null,"[ 3 ]"," Users get cryptic error\xa0messages"),Object(n.a)("p",null,"Error messages automatically sent to the user are often not consumer friendly. It would have been more useful if the user received an error message like \u201cAn unexpected error has occurred. Please report to ",Object(n.a)("a",c({parentName:"p"},{href:"mailto:errors@mydomain.com"}),"errors@mydomain.com"),"\u201d instead of \u201cUser.find is not a function\u201d."),Object(n.a)("hr",null),Object(n.a)("p",null,"To avoid these issues, errors happening inside resolve functions must be processed before sending them to the client. Unless changes are made to graphql-js these errors must be handled inside resolve functions or after completely processing the query. Both approaches have limitations."),Object(n.a)("p",null,"There are quite a few ",Object(n.a)("a",c({parentName:"p"},{href:"https://github.com/graphql/graphql-js/issues?utf8=%E2%9C%93&q=is%3Aissue+is%3Aopen+error"}),"open issues")," on the graphql-js Github repo related to error handling, most of them can be handled by:"),Object(n.a)("ol",null,Object(n.a)("li",{parentName:"ol"},"Logging all error messages and stacks on the server."),Object(n.a)("li",{parentName:"ol"},"Allowing the user to control errors sent to the client.")),Object(n.a)("h2",null,Object(n.a)("strong",{parentName:"h2"},"Enter graphql-errors")),Object(n.a)("p",null,"The ",Object(n.a)("strong",{parentName:"p"},"graphql-errors")," node module attempts to solve these issue by masking errors sent to users and logging errors on the server. Instead of sending the real error message, it sends a simple error message \u201cInternal Error\u201d. This protects the server source code from leaking out. It also logs error messages on the server with stacktraces."),Object(n.a)("p",null,'{{< figure src="/imported/1-MwdytBP91MwjN6m7IKMjRA.png" >}}'),Object(n.a)("p",null,"Fields, types or schemas can be processed to behave this way using the ",Object(n.a)("strong",{parentName:"p"},"maskErrors")," function. If it\u2019s necessary to handle errors in a different way, it can be done easily using the ",Object(n.a)("strong",{parentName:"p"},"setDefaultHandler")," function or by giving an error handler function as the second argument for ",Object(n.a)("strong",{parentName:"p"},"maskErrors"),"."),Object(n.a)("h3",null,"Custom Error\xa0Messages"),Object(n.a)("p",null,"It is also a good practice to send user friendly error messages to the client. This can be done by using a special ",Object(n.a)("strong",{parentName:"p"},"UserError")," type. When a ",Object(n.a)("strong",{parentName:"p"},"UserError")," is thrown inside a resolve function, it will be sent to the user."),Object(n.a)("hr",null),Object(n.a)("blockquote",null,Object(n.a)("p",{parentName:"blockquote"},"For the ",Object(n.a)("a",c({parentName:"p"},{href:"https://github.com/kadirahq/meteor-graphql"}),"Meteor GraphQL")," support, we are using a slightly ",Object(n.a)("a",c({parentName:"p"},{href:"https://github.com/kadirahq/meteor-graphql/pull/6"}),"different approach")," and using Meteor\u2019s ",Object(n.a)("strong",{parentName:"p"},"Meteor.Error")," instead of ",Object(n.a)("strong",{parentName:"p"},"UserError."))),Object(n.a)("p",null,"You can find the ",Object(n.a)("strong",{parentName:"p"},"graphql-errors")," module on Github (",Object(n.a)("a",c({parentName:"p"},{href:"https://github.com/kadirahq/graphql-errors"}),"kadirahq/graphql-errors"),") with more information. If you wish to join the discussion about whether custom error types should be a part of GraphQL, checkout this ",Object(n.a)("a",c({parentName:"p"},{href:"https://github.com/facebook/graphql/issues/135"}),"Github Issue"),"."))}u.isMDXComponent=!0},ry8G:function(e,r,t){(window.__NEXT_P=window.__NEXT_P||[]).push(["/blog/2016-01-03-masking-graphql-errors",function(){return t("3IMX")}])}},[["ry8G",0,1,2]]]);