_N_E=(window.webpackJsonp_N_E=window.webpackJsonp_N_E||[]).push([[22],{TGaU:function(e,n,a){(window.__NEXT_P=window.__NEXT_P||[]).push(["/blog/2015-07-28-day-2--built-in-features",function(){return a("clS2")}])},clS2:function(e,n,a){"use strict";a.r(n),a.d(n,"meta",(function(){return c})),a.d(n,"default",(function(){return u}));var t=a("rePB"),r=a("Ff2n"),o=(a("q1tI"),a("7ljp")),s=a("hOk3");function l(e,n){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);n&&(t=t.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),a.push.apply(a,t)}return a}function i(e){for(var n=1;n<arguments.length;n++){var a=null!=arguments[n]?arguments[n]:{};n%2?l(Object(a),!0).forEach((function(n){Object(t.a)(e,n,a[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):l(Object(a)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(a,n))}))}return e}var c={title:"Day 2: Built-in Features",description:"This tutorial consists of a number of example go programs demonstrating each feature. It is recommended to try some of them on the Go playground or on your local machine.",intro:Object(o.a)("section",null,Object(o.a)("p",null,"This tutorial consists of a number of example go programs demonstrating each feature. It is recommended to try some of them on the Go playground or on your local machine.")),date:"2015-07-28",tags:["go"]},p={meta:c},m=Object(s.a)({meta:c});function u(e){var n=e.components,a=Object(r.a)(e,["components"]);return Object(o.a)(m,i(i(i({},p),a),{},{components:n,mdxType:"MDXLayout"}),Object(o.a)("p",null,"This tutorial consists of a number of example go programs demonstrating each feature. It is recommended to try some of them on the Go playground or on your local machine."),Object(o.a)("p",null,"Constants are declared using the ",Object(o.a)("inlineCode",{parentName:"p"},"const")," keyword. They can be declared with a data type but it\u2019s not common. The \u201cHello World\u201d string can be stored in a constant and printed."),Object(o.a)("pre",null,Object(o.a)("code",i({parentName:"pre"},{className:"language-go"}),'package main\n\nfunc main() {\n    const hello = "Hello World"\n    println(hello)\n}\n')),Object(o.a)("h2",null,"Variables"),Object(o.a)("p",null,"Variables can be declared using the ",Object(o.a)("strong",{parentName:"p"},"var")," keyword. The \u201cHello World\u201d string can be stored in a variable before printing."),Object(o.a)("pre",null,Object(o.a)("code",i({parentName:"pre"},{className:"language-go"}),'package main\n\nfunc main() {\n    var hello string\n    hello = "Hello World"\n\n    // hello := "Hello World"\n    // Can be used to declare and assign\n    // at the same time. Check note below.\n\n    println(hello)\n}\n')),Object(o.a)("p",null,"The first 2 lines in the function can be shortened with the \u201c:=\u201d operator. This will attempt to identify the type form the value and use it. In most cases this will work as expected but when using numbers, it will always use ",Object(o.a)("strong",{parentName:"p"},"int")," for integers and ",Object(o.a)("strong",{parentName:"p"},"float64")," for floating point numbers. When writing Go programs, the\xa0:= operator is preferred more than declaring with ",Object(o.a)("strong",{parentName:"p"},"var")," and assigning later."),Object(o.a)("p",null,"Please note that all variables created must be used in the program otherwise it\u2019ll give an error when running/compiling. In some cases the \u201c_\u201d can be used in place of a variable."),Object(o.a)("p",null,"Go has many more data types which can be read from the ",Object(o.a)("a",i({parentName:"p"},{href:"https://golang.org/ref/spec#Types"}),"go specification"),". The go spec is shorter than most others and also very easy to read and understand."),Object(o.a)("h2",null,"Functions"),Object(o.a)("p",null,"Functions can be defined in Go using the ",Object(o.a)("strong",{parentName:"p"},"func")," keyword. The hello world program can be written using a sayHello function."),Object(o.a)("pre",null,Object(o.a)("code",i({parentName:"pre"},{className:"language-go"}),'package main\n\nfunc main() {\n    sayHello()\n}\n\nfunc sayHello() {\n    println("Hello World")\n}\n')),Object(o.a)("p",null,"Go functions can also get a number of arguments and use them."),Object(o.a)("pre",null,Object(o.a)("code",i({parentName:"pre"},{className:"language-go"}),'package main\n\nfunc main() {\n    sayHello("John", "Doe")\n}\n\n// sayHello(fname string, lname string)\n// is also valid and does the same thing\nfunc sayHello(fname, lname string) {\n    println("Hello " + fname + " " + lname)\n}\n')),Object(o.a)("p",null,"Go functions can also ",Object(o.a)("strong",{parentName:"p"},"return multiple arguments"),"."),Object(o.a)("pre",null,Object(o.a)("code",i({parentName:"pre"},{className:"language-go"}),'package main\n\nfunc main() {\n    fname, lname := getName()\n    sayHello(fname, lname)\n}\n\nfunc getName() (string, string) {\n    return "John", "Doe"\n}\n\nfunc sayHello(fname, lname string) {\n    println("Hello " + fname + " " + lname)\n}\n')),Object(o.a)("p",null,"Go functions can be used as values. They can be stored in variables, passed as arguments and returned from other functions."),Object(o.a)("pre",null,Object(o.a)("code",i({parentName:"pre"},{className:"language-go"}),'package main\n\nfunc main() {\n    greet := getGreeter("Hi")\n    greet("John Doe")\n}\n\nfunc getGreeter(prefix string) func(name string) {\n    fn := func(name string) {\n        println(prefix + " " + name)\n    }\n    return fn\n}\n')),Object(o.a)("p",null,"Above example also demonstrates why is most commonly known as a ",Object(o.a)("strong",{parentName:"p"},"closure"),". The function created inside getGreeter captures surrounding variables (in this example, the prefix variable) and remembers it when it\u2019s used later."),Object(o.a)("h2",null,"Control Statements"),Object(o.a)("p",null,"Go only has a few statements to control program flow. They are ",Object(o.a)("strong",{parentName:"p"},"if"),", ",Object(o.a)("strong",{parentName:"p"},"switch"),", ",Object(o.a)("strong",{parentName:"p"},"for"),", ",Object(o.a)("strong",{parentName:"p"},"break"),", ",Object(o.a)("strong",{parentName:"p"},"continue")," and ",Object(o.a)("strong",{parentName:"p"},"goto"),". Go also has a ",Object(o.a)("strong",{parentName:"p"},"select")," statement which is best explained after getting used to go-routines and basics of concurrent programming in go."),Object(o.a)("h3",null,"If"),Object(o.a)("p",null,"In Go control statements do not use parentheses."),Object(o.a)("pre",null,Object(o.a)("code",i({parentName:"pre"},{className:"language-go"}),'package main\n\nfunc main() {\n    user := "Goku"\n\n    if user == "Goku" {\n        println("Hello Admin")\n    }\n}\n')),Object(o.a)("p",null,"If conditions may also have an else block."),Object(o.a)("pre",null,Object(o.a)("code",i({parentName:"pre"},{className:"language-go"}),'package main\n\nfunc main() {\n    user := "Nappa"\n\n    if user == "Goku" {\n        println("Hello Admin")\n    } else {\n        println("Hello Guest")\n    }\n}\n')),Object(o.a)("p",null,"Go also supports else-if blocks. In some cases, a switch may be more appropriate than long if-else ladders."),Object(o.a)("pre",null,Object(o.a)("code",i({parentName:"pre"},{className:"language-go"}),'package main\n\nfunc main() {\n    user := "Gohan"\n\n    if user == "Goku" {\n        println("Hello Admin")\n    } else if user == "Gohan" {\n        println("Hello User")\n    } else {\n        println("Hello Guest")\n    }\n}\n')),Object(o.a)("h3",null,"switch"),Object(o.a)("p",null,"Above example can be written using a switch statement. A switch can be used with strings, integers and other types."),Object(o.a)("pre",null,Object(o.a)("code",i({parentName:"pre"},{}),'package main\n\nfunc main() {\n    user := "Gohan"\n\n    switch user {\n    case "Goku":\n        println("Hello Admin")\n    case "Gohan":\n        println("Hello User")\n    default:\n        println("Hello Guest")\n    }\n}\n')),Object(o.a)("p",null,"The switch can be written in another format which is useful for more complex situations."),Object(o.a)("pre",null,Object(o.a)("code",i({parentName:"pre"},{className:"language-go"}),'package main\n\nfunc main() {\n    user := "Goku"\n    pass := "Pass"\n\n    switch {\n    case user == "Goku" && pass == "P@$Z":\n        println("Login Success")\n    case user == "Goku":\n        println("Incorrect Password")\n    default:\n        println("User Not Found")\n    }\n}\n')),Object(o.a)("h3",null,"for"),Object(o.a)("p",null,"Go only has for loops but it has a few forms. For loops can be used in many ways depending on the situation. The first form is the infinite loop. The break keyword can be used to exit the loop when necessary."),Object(o.a)("pre",null,Object(o.a)("code",i({parentName:"pre"},{className:"language-go"}),'package main\n\nfunc main() {\n    for {\n        println("Loop")\n    }\n}\n')),Object(o.a)("p",null,"The second form is similar to the while loop in most languages."),Object(o.a)("pre",null,Object(o.a)("code",i({parentName:"pre"},{className:"language-go"}),'package main\n\nfunc main() {\n    i := 0\n\n    for i < 5 {\n        i++\n        println("Loop")\n    }\n}\n')),Object(o.a)("p",null,"Above loop can be written using the more common for loop like form."),Object(o.a)("pre",null,Object(o.a)("code",i({parentName:"pre"},{className:"language-go"}),'package main\n\nfunc main() {\n    for i := 0; i < 5; i++ {\n        println("Loop")\n    }\n}\n')),Object(o.a)("p",null,"There are 2 more special cases which is explained under Slices and Maps."),Object(o.a)("h2",null,"Data Structures"),Object(o.a)("p",null,"Go only has a few data structures built into the language but they are flexible enough to more complex ones on top of them."),Object(o.a)("h3",null,"Slices"),Object(o.a)("p",null,"Go ",Object(o.a)("strong",{parentName:"p"},"arrays")," are fixed length therefore not easy to handle. Therefore, go programmers often use slices to store series of data. A slice can be created using the ",Object(o.a)("strong",{parentName:"p"},"make")," keyword. In this example the ",Object(o.a)("strong",{parentName:"p"},"Println")," function inside the ",Object(o.a)("strong",{parentName:"p"},"fmt")," package is used. ",Object(o.a)("strong",{parentName:"p"},"fmt.Println")," can print more data types than ",Object(o.a)("strong",{parentName:"p"},"println"),". Packages will be explained more in a future tutorial."),Object(o.a)("pre",null,Object(o.a)("code",i({parentName:"pre"},{className:"language-go"}),'package main\n\nimport "fmt"\n\nfunc main() {\n    sz := 3 // slice size\n    t3s := make([]string, sz)\n    t3s[0] = "Krillin"\n    t3s[1] = "Gohan"\n    t3s[2] = "Dende"\n    fmt.Println(t3s)\n}\n')),Object(o.a)("p",null,"Slices can also be created with an initial set of elements. Additional items can be added to a slice using the append function. ",Object(o.a)("em",{parentName:"p"},"Please note that the array used for the slice may or may not change which depends on the slice\u2019s capacity (array size).")),Object(o.a)("pre",null,Object(o.a)("code",i({parentName:"pre"},{className:"language-go"}),'package main\n\nimport "fmt"\n\nfunc main() {\n    t3s := []string{"Krillin", "Gohan", "Dende"}\n    t4s := append(t3s, "Vegeta")\n    fmt.Println(t3s, t4s)\n}\n')),Object(o.a)("p",null,"The for loop has a special form to iterate over a slice."),Object(o.a)("pre",null,Object(o.a)("code",i({parentName:"pre"},{className:"language-go"}),'package main\n\nimport "fmt"\n\nfunc main() {\n    t3s := []string{"Krillin", "Gohan", "Dende"}\n    t4s := make([]string, 4)\n\n    for i, name := range t3s {\n        t4s[i] = name\n    }\n\n    t4s[3] = "Vegeta"\n    fmt.Println(t3s, t4s)\n}\n')),Object(o.a)("p",null,"The ",Object(o.a)("strong",{parentName:"p"},"copy")," function can be used to copy data form one slice to another."),Object(o.a)("pre",null,Object(o.a)("code",i({parentName:"pre"},{className:"language-go"}),'package main\n\nimport "fmt"\n\nfunc main() {\n    t4s := []string{"Krillin", "Gohan", "Dende", "Vegeta"}\n    t3s := make([]string, 3)\n    copy(t3s, t4s)\n\n    fmt.Println(t3s, t4s)\n}\n')),Object(o.a)("p",null,"A slice can be made from another slice. Both slices still use the same array. Therefore any changes made to one slice will reflect on the other."),Object(o.a)("pre",null,Object(o.a)("code",i({parentName:"pre"},{className:"language-go"}),'package main\n\nimport "fmt"\n\nfunc main() {\n    t4s := []string{"Krillin", "Gohan", "Dende", "Vegeta"}\n    t3s := t4s[0:3]\n    fmt.Println(t3s, t4s)\n\n    t3s[2] = "Little Green"\n    fmt.Println(t3s, t4s)\n}\n')),Object(o.a)("p",null,"To learn more about how slices work, read ",Object(o.a)("a",i({parentName:"p"},{href:"http://blog.golang.org/go-slices-usage-and-internals"}),"go slice usage and internals")," on golang blog."),Object(o.a)("h3",null,"Maps"),Object(o.a)("p",null,"Go map keys can be strings, integers, floats, structs or pointers to data types. This can be useful for mapping one value to another with many data types. The same ",Object(o.a)("strong",{parentName:"p"},"make")," keyword can be used to create an empty map."),Object(o.a)("pre",null,Object(o.a)("code",i({parentName:"pre"},{className:"language-go"}),'package main\n\nimport "fmt"\n\nfunc main() {\n    t3s := make(map[string]string)\n    t3s["Krillin"] = "Human"\n    t3s["Gohan"] = "Saiyan"\n    t3s["Dende"] = "Namekian"\n    fmt.Println(t3s)\n}\n')),Object(o.a)("p",null,"A map can be created with an initial set of items. Unlike slices, maps are copied if assigned to a new variable."),Object(o.a)("pre",null,Object(o.a)("code",i({parentName:"pre"},{}),'package main\n\nimport "fmt"\n\nfunc main() {\n    t3s := map[string]string{\n        "Krillin": "Human",\n        "Gohan": "Saiyan",\n        "Dende": "Namekian",\n    }\n    \n    t4s := t3s\n    t4s["Vegeta"] = "Saiyan"\n\n    fmt.Println(t3s, t4s)\n}\n')),Object(o.a)("p",null,"For loop has a special form for maps to iterate over keys and values. The order keys are accessed is randomized by Go to make sure that developers do not depend on it accidentally."),Object(o.a)("pre",null,Object(o.a)("code",i({parentName:"pre"},{className:"language-go"}),'package main\n\nfunc main() {\n    t3s := map[string]string{\n        "Krillin": "Human",\n        "Gohan":   "Saiyan",\n        "Dende":   "Namekian",\n    }\n\n    for name, race := range t3s {\n        println(name + " is a " + race)\n    }\n}\n')),Object(o.a)("h3",null,"Structs"),Object(o.a)("p",null,"Go structs are a collection of variables with one or more data types."),Object(o.a)("pre",null,Object(o.a)("code",i({parentName:"pre"},{className:"language-go"}),'package main\n\nimport "fmt"\n\nfunc main() {\n    type member struct {\n        name string\n        race string\n    }\n    \n    krillin := member{}\n    krillin.name = "Krillin"\n    krillin.race = "Human"\n\n    gohan := member{\n        name: "Gohan",\n        race: "Saiyan",\n    }\n\n    fmt.Println(krillin, gohan)\n}\n')),Object(o.a)("p",null,"Structs may also have ",Object(o.a)("strong",{parentName:"p"},"methods")," which makes it similar to classes in OOP languages. To add methods to structs, they must be declared outside the main function."),Object(o.a)("pre",null,Object(o.a)("code",i({parentName:"pre"},{className:"language-go"}),'package main\n\ntype member struct {\n    name string\n    race string\n}\n\nfunc (m member) intro() {\n    println("Hi, I\'m " + m.name)\n}\n\nfunc main() {\n    krillin := member{\n        name: "Krillin",\n        race: "Human",\n    }\n\n    krillin.intro()\n}\n')),Object(o.a)("h2",null,"What\u2019s Next\xa0?"),Object(o.a)("p",null,"This tutorial only covers the most common parts of golang built-ins. To read more the best place is the ",Object(o.a)("a",i({parentName:"p"},{href:"https://golang.org/ref/spec"}),"golang spec"),". It\u2019s also the best place to look when there\u2019s a question regarding how go works."))}u.isMDXComponent=!0}},[["TGaU",0,1,2]]]);