_N_E=(window.webpackJsonp_N_E=window.webpackJsonp_N_E||[]).push([[32],{L4OY:function(e,t,n){"use strict";n.r(t),n.d(t,"meta",(function(){return l})),n.d(t,"default",(function(){return h}));var a=n("rePB"),o=n("Ff2n"),c=(n("q1tI"),n("7ljp")),r=n("hOk3");function s(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?s(Object(n),!0).forEach((function(t){Object(a.a)(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):s(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}var l={title:"Duplicate click events",description:"While trying to debug this issue, we found out a couple of interesting things about how Angular manages event handlers.",intro:Object(c.a)("section",null,Object(c.a)("p",null,"While trying to debug this issue, we found out a couple of interesting things about how Angular manages event handlers.")),date:"2017-06-27",tags:["js","angular"]},p={meta:l},u=Object(r.a)({meta:l});function h(e){var t=e.components,n=Object(o.a)(e,["components"]);return Object(c.a)(u,i(i(i({},p),n),{},{components:t,mdxType:"MDXLayout"}),Object(c.a)("p",null,"While trying to debug this issue, we found out a couple of interesting things about how Angular manages event handlers."),Object(c.a)("p",null,"The double click event bug can be recreated easily with the following ",Object(c.a)("a",i({parentName:"p"},{href:"https://github.com/mnmtanish/test-ng-event"}),"example app"),". The important parts are:"),Object(c.a)("p",null,"The \u201cclick\u201d Output of the button component:"),Object(c.a)("pre",null,Object(c.a)("code",i({parentName:"pre"},{}),"<button (click)=\"clicked($event)\">\n  <ng-content></ng-content>\n</button>\n\nexport class TestButtonComponent implements OnInit {\n  @Output() click: EventEmitter<MouseEvent>;\n\n  clicked(e: MouseEvent) {\n    console.log('TestButtonComponent: clicked!');\n    this.click.emit(e)\n  }\n\n  ...\n}\n")),Object(c.a)("p",null,"and the code which listens to the event:"),Object(c.a)("pre",null,Object(c.a)("code",i({parentName:"pre"},{}),"<app-test-button (click)=\"clicked($event)\">\n  Test Button\n</app-test-button>\n\nexport class AppComponent {\n  clicked(e: MouseEvent) {\n    console.log('AppComponent: clicked!');\n  }\n}\n")),Object(c.a)("p",null,"When we ran the app with a similar code, the \u201cTestButtonComponent: clicked!\u201d text gets logged once as expected but the \u201cAppComponent: clicked!\u201d text gets logged twice."),Object(c.a)("p",null,"Let\u2019s add a breakpoint on the AppComponent click event handler."),Object(c.a)("img",{src:"/_next/static/images/82356975194fadf815f70d938f035571.png",alt:"Screenshot taken during the second click event emit with the stack\xa0trace"}),Object(c.a)("p",null,"If we analyze ",Object(c.a)("a",i({parentName:"p"},{href:"https://github.com/mnmtanish/test-ng-event"}),"stack traces")," on the event handler, we can see that the events are originating from different sources."),Object(c.a)("ol",null,Object(c.a)("li",{parentName:"ol"},Object(c.a)("inlineCode",{parentName:"li"},"<button>.click")," \u2192 ",Object(c.a)("inlineCode",{parentName:"li"},"TestButtonComponent.click")," \u2192\xa0!"),Object(c.a)("li",{parentName:"ol"},Object(c.a)("inlineCode",{parentName:"li"},"<app-test-button>.click")," \u2192\xa0!")),Object(c.a)("p",null,"This brings us to research on how Angular binds to events on components. The first event listed above was easy to reason about as it is what we were expecting in our example. The \u201cclick\u201d DOM event on the button element fires the \u201cclick\u201d Output which calls the event handler."),Object(c.a)("p",null,"The second event on the other hand is created from a DOM event on the component element. This event listener is created by the ",Object(c.a)("a",i({parentName:"p"},{href:"https://github.com/angular/angular/blob/5293794316cc1b0f57d5d88b3fefdf6ae29d0d97/packages/platform-browser/src/dom/events/dom_events.ts"}),"DomEventsPlugin")," on the Angular ",Object(c.a)("a",i({parentName:"p"},{href:"https://github.com/angular/angular/blob/5293794316cc1b0f57d5d88b3fefdf6ae29d0d97/packages/platform-browser/src/dom/events/event_manager.ts"}),"EventManager"),". (If we use event names handled by HammerJS such as \u201ctap\u201d or \u201cpinch\u201d the ",Object(c.a)("a",i({parentName:"p"},{href:"https://github.com/angular/angular/blob/5293794316cc1b0f57d5d88b3fefdf6ae29d0d97/packages/platform-browser/src/dom/events/hammer_gestures.ts"}),"HammerGesturesPlugin")," will be used.)"),Object(c.a)("blockquote",null,Object(c.a)("p",{parentName:"blockquote"},"This means that all custom events used throughout the app also has event listeners on the DOM with that name on each component.")),Object(c.a)("p",null,"Angular will use the DomEventsPlugin for ALL event names if no other plugins support that event. This means that all custom events used throughout the app also has event listeners on the DOM with that name on each component. This can be confirmed using Chrome developer tools."),Object(c.a)("img",{src:"/_next/static/images/b858952fbaa5b938ebff482c98693c7b.png",alt:"Screenshot of the list of event listeners on the app-test-button element"}),Object(c.a)("p",null,"It requires more experiments to check the performance impact on the app caused because of this approach. But the point I like to emphasize here is that when using events in Angular, it is important to be aware of this in order to avoid any unexpected behavior."),Object(c.a)("p",null,"To learn more about the Angular EventManager, I highly recommend taking 5 minutes to go through ",Object(c.a)("a",i({parentName:"p"},{href:"https://github.com/angular/angular/tree/5293794316cc1b0f57d5d88b3fefdf6ae29d0d97/packages/platform-browser/src/dom/events"}),"the source code"),". Also check this ",Object(c.a)("a",i({parentName:"p"},{href:"https://medium.com/@TheLarkInn/hacking-angular2-binding-multiple-dom-events-f781b14ef676"}),"blog post")," about writing custom EventManagerPlugins."),Object(c.a)("p",null,Object(c.a)("strong",{parentName:"p"},"Edit:")," fixed a mistake in the example code about related to event bubbling."))}h.isMDXComponent=!0},RZFS:function(e,t,n){(window.__NEXT_P=window.__NEXT_P||[]).push(["/blog/2017-06-27-debugging-duplicate-click-events",function(){return n("L4OY")}])}},[["RZFS",0,1,2]]]);